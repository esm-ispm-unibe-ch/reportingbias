diabJAGSvcov <- var(diabetesJAGS$BUGSoutput$sims.list$LOR[,1:(K-1),1])
lik.cov<-recon_vcov(diabJAGSvcov, X = X) #reconstruct the variance ### tried with prior.prec=0 as the paper says but does not work  ####
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = diabJAGSvcov,
nmatype = "fixed",
X = X, trt.code =  diabetes.nma$trts,
opt.max = FALSE)
diabetes <- read.csv("CINeMA/diabetes.csv")
diabetes.pw <- pairwise(t, r, n, data = diabetes, studlab = id, sm="OR")
# run netmeta
diabetes.nma <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = diabetes.pw)
K <- diabetes.nma$n  # Number of treatments
diabetes <- data
#### NETMETA ####
# pairwise format
diabetes.pw <- pairwise(t, r, n, data = diabetes, studlab = id, sm="OR")
# run netmeta
diabetes.nma <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = diabetes.pw)
K <- diabetes.nma$n  # Number of treatments
source("design matrix.R")
X <- design(diabetes.nma)  ## check you get same design matrix as above
#####   Bayesian  #####
# create basic parameters based on chosen reference
basicparam <- diabetesJAGS$BUGSoutput$mean$LOR[1:(K-1),1]
SDbasicparam<- diabetesJAGS$BUGSoutput$sd$LOR[1:(K-1),1]### !!! the SDs just to check later
# var-cov matrix of the basic parameters from the simulations list
diabJAGSvcov <- var(diabetesJAGS$BUGSoutput$sims.list$LOR[,1:(K-1),1])
lik.cov<-recon_vcov(diabJAGSvcov, X = X) #reconstruct the variance ### tried with prior.prec=0 as the paper says but does not work  ####
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = diabJAGSvcov,
nmatype = "fixed",
X = X, trt.code =  diabetes.nma$trts,
opt.max = FALSE)
source("design matrix.R")
X <- design(diabetes.nma)  ## check you get same design matrix as above
#####   Bayesian  #####
# create basic parameters based on chosen reference
basicparam <- diabetesJAGS$BUGSoutput$mean$LOR[1:(K-1),1]
SDbasicparam<- diabetesJAGS$BUGSoutput$sd$LOR[1:(K-1),1]### !!! the SDs just to check later
# var-cov matrix of the basic parameters from the simulations list
diabJAGSvcov <- var(diabetesJAGS$BUGSoutput$sims.list$LOR[,1:(K-1),1])
lik.cov<-recon_vcov(diabJAGSvcov, X = X) #reconstruct the variance ### tried with prior.prec=0 as the paper says but does not work  ####
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = diabJAGSvcov,
nmatype = "fixed",
X = X, trt.code =  diabetes.nma$trts,
opt.max = FALSE)
# create basic parameters based on chosen reference
basicparam<-diabetes.nma$TE.random[-1, 1] #the basic parameters all vs treat 1
### has to take the column instead of the row to match it with the posterior from mcmc in the example ####
covariance<-diabetes.nma$Cov.random[1:(K-1), 1:(K-1)] # the variance-covariance between the basic parameters
lik.cov<-recon_vcov(covariance, X = X) #reconstruct the variance ### tried with prior.prec=0 as the paper says but does not work  ####
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
opt.max = FALSE)
X <- matrix.map(diabetes.nma)
# create basic parameters based on chosen reference
basicparam<-diabetes.nma$TE.random[-1, 1] #the basic parameters all vs treat 1
### has to take the column instead of the row to match it with the posterior from mcmc in the example ####
covariance<-diabetes.nma$Cov.random[1:(K-1), 1:(K-1)] # the variance-covariance between the basic parameters
lik.cov<-recon_vcov(covariance, X = X) #reconstruct the variance ### tried with prior.prec=0 as the paper says but does not work  ####
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
opt.max = FALSE)
# Get treatments codes for the contrasts with data
d.a <- d.b <- vector(length = nrow(X))
for (i in 1:nrow(X)){
d.a[i] <- ifelse(any(X[i, ] == -1), which(X[i, ] == -1), 0) + 1
d.b[i] <- ifelse(any(X[i, ] == 1), which(X[i, ] == 1), 0) + 1
}
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
mcid=0.5, opt.max = FALSE)
thresh
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
opt.max = FALSE)
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
opt.max = FALSE, mcid = 0.5)
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X, trt.code = diabetes.nma$trts,
opt.max = FALSE, mcid = 0.05)
thresh
thresh <- nma_thresh(mean.dk = basicparam,
lhood = lik.cov,
post = covariance,
nmatype = "fixed",
X = X,
opt.max = FALSE, mcid = 0.05)
thresh
d.a <- d.b <- vector(length = nrow(X))
for (i in 1:nrow(X)){
d.a[i] <- ifelse(any(X[i, ] == -1), which(X[i, ] == -1), 0) + 1
d.b[i] <- ifelse(any(X[i, ] == 1), which(X[i, ] == 1), 0) + 1
}
# transform from d_ab style contrast references into d[i] style from full set of contrast for easy indexing in R
# d.i <- d_ab2i(d.a, d.b, K = K)
# Create plot data
plotdat <- data.frame(lab = paste0(diabetes.nma$trts[d.b], " vs. ", diabetes.nma$trts[d.a]),
contr.mean = diag(diabetes.nma$TE.random[d.b, d.a]),
CI2.5 = diag(diabetes.nma$lower.random[d.b, d.a]),
CI97.5 = diag(diabetes.nma$upper.random[d.b, d.a]))
thresh_forest(thresh, contr.mean, CI2.5, CI97.5, label = lab, data = plotdat,
label.title = "Contrast", xlab = "Log Odds Ratio",
y.title = "Log OR", CI.title = "95% Confidence Interval",
II.title = expression("Invariant Interval and "*tilde(k)*"*"),
II.cols = rgb(.72, .80, .93),
xlim = c(-2, 2), refline = 0, digits = 2)
library(nmathresh)
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("./Headaches posterior summaries.Rda")
# Posterior means of treatment parameters
post.mean.d <- post.summary$statistics[1:7, "Mean"]
post.cov.d <- post.cov[1:7, 1:7]
## RECONSTRUCT LIKELIHOOD  ----------------------------------------------------
# First, we must reconstruct the likelihood covariance matrix. Note that a flat
# prior with precision 0.0001 was used.
# Contrast design matrix is
X <- matrix(ncol = 7,byrow = TRUE,
# d2 d3 d4 d5 d6 d7 d8
c(1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 1,
0,-1, 0, 0, 1, 0, 0,
0, 0, 0, 0,-1, 1, 0))
# Reconstruct using NNLS
lik.cov <- recon_vcov(post.cov.d,          # Posterior covariance matrix
prior.prec = .0001,  # Prior precision
X = X)               # Contrast design matrix
# Get indices of contrasts in likelihood in full contrast vector
d.a <- d.b <- vector(length = nrow(X))
for (i in 1:nrow(X)) {
d.a[i] <- ifelse(any(X[i,] == -1), which(X[i,] == -1),0) + 1
d.b[i] <- ifelse(any(X[i,] == 1),which(X[i,] == 1),0) + 1
}
d.i <- d_ab2i(d.a, d.b, K = 8)
## THRESHOLD ANALYSIS ---------------------------------------------------------
# Now we can perform threshold analysis at the contrast level.
# Thresholds are derived using the nma_thresh function
thresh <- nma_thresh(mean.dk = post.mean.d,   # Posterior means of treatment effects
lhood = lik.cov,         # Reconstructed likelihood covariance matrix
post = post.cov.d,       # Posterior covariance matrix
# -- Further options below --
nmatype = "fixed",       # Approximate two-stage FE NMA
X = X,                   # Contrast design matrix
opt.max = FALSE,         # Lower treatment effects better
mcid = 0.5,              # Specify MCID for decision rule
mcid.type = "decision")
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("~/PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches posterior summaries.Rda")
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("~/PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches/Headaches posterior summaries.Rda")
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("~/PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches/Headaches posterior summaries.Rda")
library(nmathresh)
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("~/PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches/Headaches posterior summaries.Rda")
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("./PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches posterior summaries.Rda")
## SETUP ----------------------------------------------------------------------
# Read in the posterior summaries. These were generated by WinBUGS, and saved
# in a summary format for easier re-use.
load("~/PhD project/Publication bias/A1341Phillippo/m18-3542_supplement1/Headaches posterior summaries.Rda")
rm(list=ls())
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
library(RCurl)
library(netmeta)
# download and store dataset
data <- read.csv(text=getURL("https://raw.githubusercontent.com/esm-ispm-unibe-ch/reportingbias/master/diabetes.csv"))
# pairwise format
data.pw <- pairwise(t, r, n, data = data, studlab = id, sm="OR")
# run netmeta
nma <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = data.pw)
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1, decision = "change")
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1, decision = "change")
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1, decision = "change")
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1, decision = "change")
library(nmathresh)
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1, decision = "change")
thresh
# threshold analysis
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1)
library(nmadb)
NMADB <- getNMADB()
binaryIDs = NMADB[NMADB$Verified=="True" & NMADB$Type.of.Outcome.=="Binary" & NMADB$Format!="iv",]$Record.ID
continuousIDs = NMADB[NMADB$Verified=="True" & NMADB$Type.of.Outcome.=="Continuous" & NMADB$Format!="iv",]$Record.ID
NMADB[NMADB$Record.ID==474842,]$Harmful.Beneficial.Outcome
NMADB[NMADB$Record.ID==474842,]$Primary.Outcome
NMADB[NMADB$Record.ID==474842,]$Number.of.Treatments
runnetmeta(474842)
nma <- runnetmeta(474842)
summary(nma)
nma$TE.random
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.3)
threshplot(thresh, nma, xlab = "Log OR")
thresh <- threshold_netmeta(nma, opt.max = F)
threshplot(thresh, nma, xlab = "Log OR")
NMADB[NMADB$Record.ID==474842, c("Primary.Outcome", "Harmful.Beneficial.Outcome")]
NMADB[Record.ID==474842, c("Primary.Outcome", "Harmful.Beneficial.Outcome")]
NMADB["Record.ID"==474842, c("Primary.Outcome", "Harmful.Beneficial.Outcome")]
thresh <- threshold_netmeta(nma, opt.max = F, mcid = 0.1)
threshplot(thresh, nma, xlab = "Log OR")
library(nmathresh)
nma_thresh
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
diabetes
diabetesM
data <- diabetes
diabetes.txt
read.delim(system.file("data", "diabetes.csv", package = "reportingbias")
)
system.file("data", "diabetes.csv", package = "reportingbias")
read.delim(system.file("data", "diabetes.txt", package = "reportingbias"))
read.csv(system.file("data", "diabetes.csv", package = "reportingbias"))
ls(package:"reportingbias")
ls(package:reportingbias)
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
diabetesT
diabetes
read.csv(as.character(diabetes))
data <- read.csv("https://raw.githubusercontent.com/esm-ispm-unibe-ch/reportingbias/master/data/diabetes.csv")
View(data)
diabetes <- read.csv("~/Virginia/PhD project/reportingbias/data/diabetes.csv")
View(diabetes)
diabetes <- read.csv("~/Virginia/PhD project/reportingbias/data/diabetes.csv")
View(diabetes)
View(diabetes)
diabetes <- read.csv("~/Virginia/PhD project/reportingbias/data/diabetes.csv")
View(diabetes)
q()
diabetes <- read.csv("~/Virginia/PhD project/Publication bias/CINeMA/diabetes.csv")
View(diabetes)
diabetes <- read.csv("~/Virginia/PhD project/reportingbias/data/diabetes.csv")
View(diabetes)
diabetes <- read.csv("~/Virginia/PhD project/reportingbias/data/diabetes.csv")
View(diabetes)
View(diabetes)
rm(list=ls())
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
diabetes
data("diabetes")
# download and store dataset
data <- read.csv("https://raw.githubusercontent.com/esm-ispm-unibe-ch/reportingbias/master/data/diabetes.csv")
# pairwise format
data.pw <- pairwise(t, r, n, data = data, studlab = id, sm="OR")
# run netmeta
nma1 <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = data.pw)
library(nmathresh)
library(netmeta)
# pairwise format
data.pw <- pairwise(t, r, n, data = data, studlab = id, sm="OR")
# run netmeta
nma1 <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = data.pw)
# threshold analysis
thresh1 <- threshold_netmeta(nma1, opt.max = F, mcid = 0.05)
threshplot(thresh1, nma1, xlab = "Log OR", xlim = c(-4,4))
nma_b <- netmeta(TE, seTE, treat1, treat2, studlab=studlab, data = data.pw, reference.group = "BBlocker")
nma1$TE.random
nma_b$TE.random
# threshold analysis
thresh1 <- threshold_netmeta(nma1, opt.max = F, mcid = 0.05)
threshplot(thresh1, nma1, xlab = "Log OR", xlim = c(-4,4))
thresh1
thresh1b <- threshold_netmeta(nma1, opt.max = F, decision = "change", mcid = 0.05)
threshplot(thresh1b, nma1, xlab = "Log OR", xlim = c(-4,4))
thresh1b <- threshold_netmeta(nma1, opt.max = F, decision = "change")
threshplot(thresh1b, nma1, xlab = "Log OR", xlim = c(-4,4))
# example(s) with network from database
library(nmadb)
NMADB <- getNMADB()
binaryIDs = NMADB[NMADB$Verified=="True" & NMADB$Type.of.Outcome.=="Binary" & NMADB$Format!="iv",]$Record.ID
continuousIDs = NMADB[NMADB$Verified=="True" & NMADB$Type.of.Outcome.=="Continuous" & NMADB$Format!="iv",]$Record.ID
NMADB[NMADB$Record.ID==474842, c("Primary.Outcome", "Harmful.Beneficial.Outcome")]
nma2 <- runnetmeta(474842)
summary(nma2)
thresh2 <- threshold_netmeta(nma2, opt.max = F, mcid = 0.1)
threshplot(thresh2, nma2, xlab = "Log OR")
thresh2b <- threshold_netmeta(nma2, opt.max = F, decision="change", mcid = 0.1)
threshplot(thresh2b, nma2, xlab = "Log OR")
Data(diabetes)
data(diabetes)
force(diabetes)
rm(list=ls())
Data(diabetes)
data(diabetes)
data(diabetes)
force(diabetes)
data(diabetes)
diabetes2
data("diabetes2")
View(diabetes2)
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
library(nmathresh)
library(netmeta)
# download and store dataset
data <- data("diabetes")
force(diabetes)
rm(list=ls())
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
library(nmathresh)
library(netmeta)
library(nmadb)
nmafunnel <- function(nma, small.values="good") {
# This is a function that takes a netmeta object as argument, produce contour-enhanced funnel plots and results from the test for funnel plot asymmetry.
#             The argument small.values specify whether small treatment effects indicate a beneficial ("good", default) or harmful ("bad") effect. So, if the outcome of the nma is positive, small.value must be set to "bad".
# It returns: a dataframe containing slope, p-values and their interpretation for each comparison with at least 10 studies;
#             the method used for the test for funnel plot asymmetry; the number of comparisons with at least 10 studies;
#             the effect measure used (same as in the netmeta object); the matrix reporting the number of studies per comparison.
# If there are no studies with at least 10 studies, the function stops.
t <- nma$A.matrix
comp.10 <- sum(t[upper.tri(t)]>9)
if(comp.10==0) {
stop("There are no comparisons with at least 10 studies")
}
else {
print(paste("There are ", comp.10, "comparisons with at least 10 studies"))
wo <- nma$data$treat1 > nma$data$treat2
if (any(wo)) {
nma$data$TE[wo] <- -nma$data$TE[wo]
ttreat1 <- nma$data$treat1
nma$data$treat1[wo] <- nma$data$treat2[wo]
nma$data$treat2[wo] <- ttreat1[wo]
if (!is.null(nma$data$n1) & !is.null(nma$data$n2)) {
tn1 <- nma$data$n1
nma$data$n1[wo] <- nma$data$n2[wo]
nma$data$n2[wo] <- tn1[wo]
}
if (!is.null(nma$data$event1) & !is.null(nma$data$event2)) {
tevent1 <- nma$data$event1
nma$data$event1[wo] <- nma$data$event2[wo]
nma$data$event2[wo] <- tevent1[wo]
}
}
tests <- NULL
for (i in 1:nrow(t)) {
for (j in 1:ncol(t)) {
if(t[i,j]>9 & i<j) {
if (nma$sm=="OR" | nma$sm=="RR") {
ma <- metabin(event1,n1,event2,n2, subset = nma$treat1==rownames(t)[i] & nma$treat2==colnames(t)[j], data=nma$data)
funnel(ma, contour = c(0.9, 0.95, 0.99), col.contour = c("darkred", "red", "lightcoral"),
cex=1.5, col="darkblue", bg="blue", cex.lab=1.2, xlab = paste(ma$sm, "effect reported as", rownames(t)[i], "over", colnames(t)[j]))
legend("bottomleft", c("0.1 > p > 0.05", "0.05 > p > 0.01", "< 0.01"), fill = c("darkred", "red", "lightcoral"), cex=1.5)
mtext(paste(rownames(t)[i], "vs", colnames(t)[j]), cex=2)
mb <- metabias(ma, method.bias = "score")
}
else {
ma <- metagen(nma$TE,nma$seTE,subset = nma$treat1==rownames(t)[i] & nma$treat2==colnames(t)[j], sm=sm)
funnel(ma, contour = c(0.9, 0.95, 0.99), col.contour = c("darkred", "red", "lightcoral"),
cex=1.5, col="darkblue", bg="blue", cex.lab=1.2, xlab = paste(ma$sm, "effect reported as", rownames(t)[i], "-", colnames(t)[j]))
legend("bottomleft", c("0.1 > p > 0.05", "0.05 > p > 0.01", "< 0.01"), fill = c("darkred", "red", "lightcoral"), cex=1.5)
mtext(paste(rownames(t)[i], "vs", colnames(t)[j]), cex=2)
mb <- metabias(ma)
}
small.2nd <- "Small studies favour 2nd intervention"
small.1st <- "Small studies favour 1st intervention"
tests <- rbind(tests, data.frame(comparison=paste(rownames(t)[i], "vs", colnames(t)[j]),
bias=round(mb$estimate["bias"], digits = 2),
p.value=round(mb$p.value, digits = 2),
interpretation=ifelse(small.values=="good",
ifelse(mb$estimate["bias"]>0, small.2nd, small.1st),
ifelse(mb$estimate["bias"]>0, small.1st, small.2nd))))
}
}
}
rownames(tests) <- NULL
res <- list(tests=tests, test.method=mb$method, num.comp.10studies=paste(comp.10, "comparisons with more than 10 studies"), effect.measure=ma$sm, comp.matrix=t)
}
}
nma2 <- runnetmeta(482001)
summary(nma2)
thresh2 <- threshold_netmeta(nma2, opt.max = F, mcid = 0.1)
threshplot(thresh2, nma2)
thresh2b <- threshold_netmeta(nma2, opt.max = F, decision="change", mcid = 0.1)
threshplot(thresh2b, nma2)
# save funnel plots in pdf file
pdf("funnel plots.pdf")
fp1 <- nmafunnel(nma2)
dev.off()
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
library(nmathresh)
library(netmeta)
library(nmadb)
nma2 <- runnetmeta(482001)
summary(nma2)
thresh2 <- threshold_netmeta(nma2, opt.max = F, mcid = 0.1)
threshplot(thresh2, nma2)
thresh2b <- threshold_netmeta(nma2, opt.max = F, decision="change", mcid = 0.1)
threshplot(thresh2b, nma2)
# save funnel plots in pdf file
pdf("funnel plots.pdf")
fp1 <- nmafunnel(nma2)
dev.off()
View(nma2$data)
nma2$designs
count(nma2$n.arms==3)
sum(nma2$n.arms==3)
sum(nma2$multiarm)
View(nma2$data)
tabulate(nma2$n.arms)
View(nma2$data)
nma2$A.matrix
fp1
View(nma2$data)
threshplot(thresh2, nma2, xlab = "Log RR", xlim = c(-4,4))
library(devtools)
install_github("esm-ispm-unibe-ch/flow_contribution")
library(contribution)
library(reportingbias)
library(nmathresh)
library(netmeta)
library(nmadb)
nma2 <- runnetmeta(482001)
summary(nma2)
ls(package:contribution)
d1 <- readByID(482001)$data
View(d1)
getContributionMatrix(d1, model = "random")
getContributionMatrix(d1, type="netwide_binary",model = "random")
getHatMatrix(d1, type = "long_binary", model="random")
getHatMatrix(d1, type = "long_binary", model="random", sm="RR")
H1 <- getHatMatrix(d1, type = "long_binary", model="random", sm="RR")
View(H1$H)
View(H1$NMAresults)
getComparisonContribution(d1, type="wide_binary", model="random")
getComparisonContribution(H1,"1:2")
getContributionMatrix(d1, type = "netwide_binary", model = "random")
getContributionMatrix(d1, type = "netwide_binary", model = "random", sm="RR")
getRandomComparisonContribution(H1, "1:2")
H1$dbt
H1$forstudycontribution
H1$H
getComparisonContribution(H1,"1:3")
getComparisonContribution(H1,"1:2")
getComparisonContribution(H1,"1:3")
getComparisonContribution(H1,"1:4")
getComparisonContribution(H1,"1:5")
getComparisonContribution(H1,"1:6")
getComparisonContribution(H1,"1:7")
getComparisonContribution(H1,"2:3")
getComparisonContribution(H1,"2:4")
getComparisonContribution(H1,"2:5")
getContributionMatrix(d1, type = "long_binary", model = "random")
getContributionMatrix(d1, type = "long_binary", model = "random", sm="RR")
contrMatrix <- getContributionMatrix(d1, type = "long_binary", model = "random", sm="RR")
View(contrMatrix$totalWeights)
View(contrMatrix$contributionMatrix)
rm(list=ls())
library(devtools)
install_github("esm-ispm-unibe-ch/reportingbias")
library(reportingbias)
install_github("esm-ispm-unibe-ch/flow_contribution")
install_github("esm-ispm-unibe-ch/flow_contribution")
update.packages(meta)
update.packages()
rm(list=ls())
install_github("esm-ispm-unibe-ch/flow_contribution")
